require 'base64'

default_platform(:ios)

BUILD_PATH = "./fastlane/builds/"
ANALYZE_ARCHIVE_UTIL_PATH = "./private-app-config/analyze_archive.sh"
PRODUCTION_SCHEME = "Tangem"
BETA_SCHEME = "Tangem Beta"
ALPHA_SCHEME = "Tangem Alpha"
BSDK_EXAMPLE_SCHEME = "BlockchainSdkExample"
PROJECT_NAME = "TangemApp.xcodeproj"
FIREBASE_TESTERS_GROUP = "testers"

before_all do |lane, options|
  lanes_to_skip_bootstrap = [
    :update_translations,
    :deploy_firebase,
    :deploy_testflight,
    :upload_dsyms,
    :refresh_dsyms,
    :get_release_version_number,
    :get_release_build_number,
  ]

  if lanes_to_skip_bootstrap.include?(lane)
    next
  end

  # Xcode version overrides available only on CI
  if ENV["CI"]&.downcase == "true"
    if options[:xcode_version_override]&.empty?
      # Will use the Xcode version from the .xcode-version file
      xcodes(
        select_for_current_build_only: true
      )
    else
      xcodes(
        version: options[:xcode_version_override],
        select_for_current_build_only: true
      )
    end
  end

  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
  ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "4"
end

desc """
A lane that builds and tests the scheme \"Tangem\" using a clean and build application.
Using enviroment: Production
Options:
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :test do
  run_tests(
    project: PROJECT_NAME,
    scheme: PRODUCTION_SCHEME,
    clean: true,
    code_coverage: true
  )
end

desc """
A lane that builds and tests SPM modules located in the \"Modules\" folder.
A separate lane is needed since it's still not possible to run unit tests from remove/local SPM dependencies inside the host app,
see https://forums.swift.org/t/running-swiftpm-tests-inside-project/62760 for details.
Options:
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :test_modules do |options|
  run_tests(
    package_path: "Modules",
    scheme: "TangemModules",
    # Without it fastlane won't pass the "-destination" argument to the "xcodebuild" and the build will fail.
    # A real & valid device name is not required, fastlane will use the first available device.
    device: "iPhone",
    # Still required in 2024 https://github.com/fastlane/fastlane/issues/20012#issuecomment-1263765513
    output_directory: Dir.pwd + "/test_output",
    result_bundle: true,
    xcodebuild_formatter: "xcpretty",
    clean: true
  )
end

desc """
A lane that builds a \"Tangem\" scheme and uploads the archive to TestFlight for release.
Using enviroment: Production
Options:
- version: app version
- build: optional build number
- changelog: string for description archive
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
- analyze_archive: boolean to determine whether to analyze the archive during the build process (default: false)
- code_sign_identity: Xcode code signing identity (string) used to analyze the archive. Optional, required only if `analyze_archive` is true
"""
lane :release do |options|
  UI.deprecated("Deprecated, use `Create release` Github action instead")

  app_id = ENV["APP_ID_PRODUCTION"]
  app_store_connect_api_key(duration: 1200, is_key_content_base64: true)
  increment_version_number(version_number: options[:version])
  increment_testflight_build_number(version: options[:version], build: options[:build])

  build(
    scheme: PRODUCTION_SCHEME, 
    version: options[:version], 
    filename: PRODUCTION_SCHEME, 
    path: BUILD_PATH,
    analyze_archive: options[:analyze_archive],
    code_sign_identity: options[:code_sign_identity],
    code_sign_mode: "release"
  )
  upload_dsyms(app_id: app_id, filename: PRODUCTION_SCHEME)

  upload_testflight(
    name: PRODUCTION_SCHEME,
    version: options[:version],
    changelog: options[:changelog]
  )
  clean_artifacts
  slack_message(
    message: "Tangem Release successfully uploaded to TestFlight",
    changelog: options[:changelog]
  )
end

desc """
A lane that builds a \"BlockchainSdkExample\" scheme without running or publishing it, just to check that the scheme is buildable.
"""
lane :check_bsdk_example_buildable do |options|
  clear_derived_data  # Required otherwise raw xcodebuild doesn't work reliably
  xcodebuild(
    project: PROJECT_NAME,
    scheme: BSDK_EXAMPLE_SCHEME,
    xcargs: "-allowProvisioningUpdates -disableAutomaticPackageResolution -onlyUsePackageVersionsFromResolvedFile",
    analyze: true
  )
end

desc """
This lane builds a \"Tangem Alpha\" scheme binary. Result binary can be used only for ad-hoc distribution.
Options:
- version: App version
- build: Build number
- filename: Name of the resulting artefact (IPA file)
- path: Path to binary
- firebase_app_id: Firebase app id for incrementing the build version number and DSYM uploads
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
- analyze_archive: boolean to determine whether to analyze the archive during the build process (default: false)
- code_sign_identity: Xcode code signing identity (string) used to analyze the archive. Optional, required only if `analyze_archive` is true
"""
lane :build_Alpha do |options|
  increment_version_number(version_number: options[:version])
  increment_firebase_build_number(app_id: options[:firebase_app_id], build: options[:build])

  build(
    export_method: "ad-hoc",
    scheme: ALPHA_SCHEME,
    version: options[:version],
    build: options[:build],
    filename: options[:filename],
    path: options[:path],
    analyze_archive: options[:analyze_archive],
    code_sign_identity: options[:code_sign_identity],
    code_sign_mode: "debug"
  )

  upload_dsyms(app_id: options[:firebase_app_id], filename: options[:filename])
end

desc """
A lane that builds a \"Tangem Beta\" scheme binary. Result binary can be used only for ad-hoc distribution.
Options:
- version: App version
- build: Build number
- filename: Name of the resulting artefact (IPA file)
- path: Path to binary
- firebase_app_id: Firebase app id for incrementing the build version number and DSYM uploads
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
- analyze_archive: boolean to determine whether to analyze the archive during the build process (default: false)
- code_sign_identity: Xcode code signing identity (string) used to analyze the archive. Optional, required only if `analyze_archive` is true
"""
lane :build_Beta do |options|
  increment_version_number(version_number: options[:version])
  increment_firebase_build_number(app_id: options[:firebase_app_id], build: options[:build])

  build(
    export_method: "ad-hoc",
    scheme: BETA_SCHEME,
    version: options[:version],
    build: options[:build],
    filename: options[:filename],
    path: options[:path],
    analyze_archive: options[:analyze_archive],
    code_sign_identity: options[:code_sign_identity],
    code_sign_mode: "debug"
  )

  upload_dsyms(app_id: options[:firebase_app_id], filename: options[:filename])
end

desc """
A lane that builds a \"Tangem\" scheme and uploads the archive to TestFlight for release.
Using enviroment: Production
Options:
- version: app version
- build: optional build number
- filename: Name of the resulting artefact (IPA file)
- path: Path to binary
- firebase_app_id: Firebase app id for DSYM uploads
- xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
- analyze_archive: boolean to determine whether to analyze the archive during the build process (default: false)
- code_sign_identity: Xcode code signing identity (string) used to analyze the archive. Optional, required only if `analyze_archive` is true
"""
lane :build_RC do |options|
  increment_version_number(version_number: options[:version])
  increment_build_number(build_number: options[:build])

  build(
    export_method: "app-store",
    scheme: PRODUCTION_SCHEME,
    version: options[:version],
    build: options[:build],
    filename: options[:filename],
    path: options[:path],
    analyze_archive: options[:analyze_archive],
    code_sign_identity: options[:code_sign_identity],
    code_sign_mode: "release"
  )

  upload_dsyms(app_id: options[:firebase_app_id], filename: options[:filename])
end

desc """
A lane that creates the build version for the release using either user input or a branch name.
Options:
- build_version_override: Optional build version override (user input)
- branch_name: Source branch name
"""
lane :get_release_version_number do |options|
  semver_regex_1 = /^\d+\.\d+\.\d+$/
  semver_regex_2 = /^\d+\.\d+$/
  build_version = ""
  build_version_source = ""
  build_version_override = options[:build_version_override]
  branch_name = options[:branch_name]

  if (not build_version_override.nil? and not build_version_override.empty?)
    build_version = build_version_override
    build_version_source = "user input"
  elsif (not branch_name.nil? and not branch_name.empty?)
    branch_name_components = branch_name.split("/")
    UI.user_error!("Invalid branch name '#{branch_name}', can't process further with the build") unless branch_name_components.length > 1
    build_version = branch_name_components[-1]
    build_version_source = "branch name"
  else
    UI.user_error!(
      "Unable to derive the build version from either 'build_version_override' or 'branch_name' " \
      "lane arguments, can't process further with the build"
    )
  end

  UI.user_error!("Invalid build version format '#{build_version}', can't process further with the build") unless !!(
    (build_version =~ semver_regex_1) or (build_version =~ semver_regex_2)
  )

  UI.important("Using the build version '#{build_version}' derived from the #{build_version_source} for this build")
  sh("echo 'release_version_number=#{build_version}' >> $GITHUB_ENV")
end

desc """
A lane that creates the build number for the release using either user input or information from App Store Connect API.
Options:
- build_number_override: Optional build number override (user input)
- asc_key_id: App Store Connect API Key ID
- asc_issuer_id: App Store Connect API Key Issuer ID
- asc_key: App Store Connect API Key (NOT in the base64 format)
"""
lane :get_release_build_number do |options|
  build_number_regex = /^\d+$/
  build_number = ""
  build_number_override = options[:build_number_override]

  if (not build_number_override.nil? and not build_number_override.empty?)
    build_number = build_number_override
  else
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = app_store_connect_api_key(
      key_id: options[:asc_key_id],
      issuer_id: options[:asc_issuer_id],
      key_content: options[:asc_key],
      is_key_content_base64: false,
      in_house: false # detecting this via ASC private key not currently supported
    )
    # We don't specify a specific version while querying the App Store Connect API
    # for a build number because we use a single, global build number across all builds
    latest_build_number = latest_testflight_build_number(api_key: api_key, app_identifier: app_identifier)
    build_number = (latest_build_number + 1).to_s
  end

  UI.user_error!("Invalid build number '#{build_number}', can't process further with the build") unless !!(
    build_number =~ build_number_regex
  )

  UI.important("Using the build number '#{build_number}' derived from App Store Connect for this build")
  sh("echo 'release_build_number=#{build_number}' >> $GITHUB_ENV")
end

desc """
Load from testFlight dSyms and upload it to Firebase
Options:
- version: app version
- build: build number
"""
lane :refresh_dsyms do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  app_store_connect_api_key(duration: 1200, is_key_content_base64: true)
  download_dsyms(
    app_identifier: app_identifier,
    version: options[:version],
    build_number: options[:build]
  )

  # Custom `binary_path` is required for SPM installations, see
  # https://firebase.blog/posts/2021/09/uploading-dsym-files-to-crashlytics-with-fastlane/ for details
  upload_symbols_to_crashlytics(
    app_id: ENV["PRODUCTION_SCHEME"],
    binary_path: "./Utilites/upload-symbols"
  )
  clean_build_artifacts
end

desc """
Fetches and updates localization bundles using Localise fastlane action (https://github.com/lokalise/lokalise-fastlane-actions).
Uses `LOKALISE_API_TOKEN` and `LOKALISE_PROJECT_ID` env vars.
Options:
- languages: A comma-delimited string of languages to update, like `en,fr,de,ja,ru,es,uk_UA`. Pass an empty string to update all available languages.
- destination: A file path to save localization files to.
"""
lane :update_translations do |options|
  # Can't pass an array as a param for a lane, see https://github.com/fastlane-community/fastlane-plugin-appicon/issues/41 for details
  languages = options[:languages]&.split(",")

  destination = options[:destination]
  UI.user_error!("Invalid destination path '#{destination}' for localization files") unless (destination and not destination.empty?)

  lokalise(
    destination: destination,
    replace_breaks: true,
    add_newline_eof: true,
    use_original: true,
    languages: languages,
    export_sort: "a_z",
    export_empty_as: "base"
  )
end

desc """
This lane deploy binary to Google Distribution
Options:
- app_id: Firebase App ID
- path: Path to binary
- firebase_token: Firebase CLI Token
- changelog: [optional] Changelog will be added to Google Distribution release notes along with the last commit hash.
"""
lane :deploy_firebase do |options|
  path = options[:path]
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"
  uploaded_release = firebase_app_distribution(
    app: options[:app_id],
    ipa_path: path,
    groups: FIREBASE_TESTERS_GROUP,
    firebase_cli_token: options[:firebase_token],
    release_notes: release_notes
  )
  release_url = uploaded_release[:testingUri]

  # Applying base64 encoding twice to prevent GA bug "Skip output 'output' since it may contain secret."
  # See https://github.com/orgs/community/discussions/13082#discussioncomment-6776428 for details
  encoded_release_url = Base64.strict_encode64(Base64.strict_encode64(release_url))
  sh("echo 'encoded_release_url=#{encoded_release_url}' >> $GITHUB_ENV")
end

desc """
This lane deploy binary to TestFLight
Options:
- asc_key_id: App Store Connect API Key ID
- asc_issuer_id: App Store Connect API Key Issuer ID
- asc_key: App Store Connect API Key (NOT in the base64 format)
- path: Path to binary
- version: app version
- build: build number
- changelog: [optional] Changelog will be added to TestFlight release notes along with the last commit hash.
"""
lane :deploy_testflight do |options|
  changelog = options[:changelog]
  release_notes = ""

  if (not changelog.nil? and not changelog.empty?)
    release_notes = "#{changelog}\nGitHash: #{last_git_commit[:commit_hash]}"
  else
    release_notes = "GitHash: #{last_git_commit[:commit_hash]}"
  end

  # Get AppStore API Key
  api_key = app_store_connect_api_key(
     key_id: options[:asc_key_id],
     issuer_id: options[:asc_issuer_id],
     key_content: options[:asc_key],
     is_key_content_base64: false,
     in_house: false # detecting this via ASC private key not currently supported
  )

  # Upload binary to TestFlight
  upload_to_testflight(
    api_key: api_key,
    skip_waiting_for_build_processing: true,
    ipa: options[:path],
    app_version: options[:version],
    build_number: options[:build],
    changelog: release_notes
  )
end

private_lane :build do |options|
  clean_artifacts

  if options[:analyze_archive] == true
    build_and_analyze(
      export_method: options[:export_method],
      scheme: options[:scheme],
      version: options[:version],
      build: options[:build],
      filename: options[:filename],
      path: options[:path],
      code_sign_identity: options[:code_sign_identity],
      code_sign_mode: options[:code_sign_mode]
    )
  else
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    build_app(
      project: PROJECT_NAME,
      xcargs: "-allowProvisioningUpdates -disableAutomaticPackageResolution -onlyUsePackageVersionsFromResolvedFile",
      disable_package_automatic_updates: true,  # Probably redundant because of `disableAutomaticPackageResolution` xcarg, but won't harm
      output_directory: options[:path],
      output_name: options[:filename],
      scheme: options[:scheme],
      clean: true,
      silent: false,
      export_method: options[:export_method],
      destination: "generic/platform=iOS",
      export_options: {
        distributionBundleIdentifier: app_identifier,
        iCloudContainerEnvironment: "Production"
      }
    )
  end
end

private_lane :build_and_analyze do |options|
  code_sign_identity = options[:code_sign_identity]
  UI.user_error!("Invalid or missing code sign identity, can't process further with the build") if (code_sign_identity.nil? or code_sign_identity.empty?)

  code_sign_mode = options[:code_sign_mode]

  xcarchive_path = File.expand_path("../" + options[:path] + options[:filename] + ".xcarchive")
  analyze_archive_util_path = File.expand_path("../" + ANALYZE_ARCHIVE_UTIL_PATH)

  archive_app(
    path: options[:path],
    filename: options[:filename],
    scheme: options[:scheme],
    export_method: options[:export_method],
    xcarchive_path: xcarchive_path
  )

  sh("#{analyze_archive_util_path} '#{xcarchive_path}' '#{code_sign_identity}' '#{code_sign_mode}'")

  create_ipa(
    path: options[:path],
    filename: options[:filename],
    scheme: options[:scheme],
    export_method: options[:export_method],
    xcarchive_path: xcarchive_path
  )
end

private_lane :archive_app do |options|
  build_app(
    project: PROJECT_NAME,
    xcargs: "-allowProvisioningUpdates -disableAutomaticPackageResolution -onlyUsePackageVersionsFromResolvedFile",
    disable_package_automatic_updates: true,  # Probably redundant because of `disableAutomaticPackageResolution` xcarg, but won't harm
    output_directory: options[:path],
    output_name: options[:filename],
    scheme: options[:scheme],
    clean: true,
    silent: false,
    export_method: options[:export_method],
    skip_codesigning: false,
    skip_package_ipa: true,
    archive_path: options[:xcarchive_path]
  )
end

private_lane :create_ipa do |options|
  build_app(
    project: PROJECT_NAME,
    xcargs: "-allowProvisioningUpdates -disableAutomaticPackageResolution -onlyUsePackageVersionsFromResolvedFile",
    disable_package_automatic_updates: true,  # Probably redundant because of `disableAutomaticPackageResolution` xcarg, but won't harm
    output_directory: options[:path],
    output_name: options[:filename],
    scheme: options[:scheme],
    export_method: options[:export_method],
    export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
    export_options: {
      iCloudContainerEnvironment: "Production"
    },
    skip_build_archive: true,
    skip_package_dependencies_resolution: false,
    archive_path: options[:xcarchive_path]
  )
end

private_lane :increment_firebase_build_number do |options|
  if options[:build].nil?
    latest_release = firebase_app_distribution_get_latest_release(
      app: options[:app_id],
      firebase_cli_token: ENV["FIREBASE_CREDITIONAL_KEY"]
    )

    if latest_release.nil?
      latest_build_number = 0
    else
      latest_build_number = latest_release[:buildVersion].to_i
    end
    increment_build_number(build_number: latest_build_number + 1)
  else
    increment_build_number(build_number: options[:build])
  end
end

private_lane :increment_testflight_build_number do |options|
  UI.deprecated("Deprecated, use `Create release` Github action instead")

  if options[:build].nil?
    latest_build_number = latest_testflight_build_number(version: options[:version])
    increment_build_number(build_number: latest_build_number + 1)
  else
    increment_build_number(build_number: options[:build])
  end
end

private_lane :upload_dsyms do |options|
  # Strip the suffix if needed
  filename = options[:filename].chomp(".ipa")
  path = BUILD_PATH + filename + ".app.dSYM.zip"

  # Custom `binary_path` is required for SPM installations, see
  # https://firebase.blog/posts/2021/09/uploading-dsym-files-to-crashlytics-with-fastlane/ for details
  upload_symbols_to_crashlytics(
    app_id: options[:app_id],
    binary_path: "./Utilites/upload-symbols",
    dsym_path: path
  )
end

private_lane :upload_testflight do |options|
  UI.deprecated("Deprecated, use `Create release` Github action instead")

  filename = options[:name] + ".ipa"
  path = BUILD_PATH + filename
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"

  upload_to_testflight(
    skip_waiting_for_build_processing: true,
    ipa: path,
    app_version: options[:version],
    changelog: release_notes
  )
end

private_lane :slack_message do |options|
  slack(
    message: options[:message] + " @qa",
    default_payloads: [:git_branch, :last_git_commit],
    slack_url: ENV["SLACK_WEBHOOK_URL"],
    attachment_properties: {
      fields: [
        {
          title: "Git Hash",
          value: last_git_commit[:commit_hash],
        },
        {
          title: "Version",
          value: get_version_number(xcodeproj: "TangemApp.xcodeproj", target: "Tangem"),
        },
        {
          title: "Build number",
          value: get_build_number(xcodeproj: "TangemApp.xcodeproj"),
        },
        {
          title: "Changelog",
          value: options[:changelog],
        }
      ]
    },
    link_names: true
  )
end

private_lane :clean_artifacts do |options|
  sh("rm -rf builds")
  clean_build_artifacts
end
