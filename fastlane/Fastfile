default_platform(:ios)

BUILD_PATH = "./fastlane/builds/"
PRODUCTION_SCHEME = "Tangem"
BETA_SCHEME = "Tangem Beta"
ALPHA_SCHEME = "Tangem Alpha"
BSDK_EXAMPLE_SCHEME = "BlockchainSdkExample"
WORKSPACE_NAME = "TangemApp.xcworkspace"
FIREBASE_TESTERS_GROUP = "testers"

before_all do |lane, options|
  lanes_to_skip_bootstrap = [
    :update_translations,
    :deploy_testflight,
    :deploy_firebase,
    :refresh_dsyms,
  ]

  if lanes_to_skip_bootstrap.include?(lane)
    next
  end

  # Xcode version overrides available only on CI
  if ENV["CI"]&.downcase == "true"
    if options[:xcode_version_override]&.empty?
      xcodes() # Will use the Xcode version from the .xcode-version file
    else
      xcodes(version: options[:xcode_version_override])
    end
  end

  Dir.chdir("..") do
    sh("./bootstrap.sh") 
  end

  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
  ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "4"
end

desc """
  A lane that builds and tests the scheme \"Tangem\" using a clean and build application.
  Using enviroment: Production
  Options:
  - xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :test do
  run_tests(
    workspace: WORKSPACE_NAME,
    scheme: PRODUCTION_SCHEME,
    clean: true,
    code_coverage: true
  )
end

desc """
  A lane that builds a \"BlockchainSdkExample\" scheme without running or publishing it, just to check that the scheme is buildable.
  Options:
  - xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :check_bsdk_example_buildable do |options|
  xcodebuild(
    workspace: WORKSPACE_NAME,
    scheme: BSDK_EXAMPLE_SCHEME,
    xcargs: "-allowProvisioningUpdates",
    analyze: true,
    raw_buildlog: true
  )
end

desc """
  This lane builds a \"Tangem Alpha\" scheme binary. Result binary can be used only for ad-hoc distribution.
  Options:
  - version: App version
  - build: Build number
  - filename: Name of the resulting artefact (IPA file)
  - path: Path to binary
  - xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :build_Alpha do |options|
  increment_version_number(version_number: options[:version])
  increment_firebase_build_number(app_id: ENV["APP_ID_BETA"], build: options[:build])

  build(
    export_method: "ad-hoc", 
    scheme: ALPHA_SCHEME, 
    version: options[:version], 
    build: options[:build], 
    filename: options[:filename], 
    path: options[:path]
  )
end

desc """
  A lane that builds a \"Tangem Beta\" scheme binary. Result binary can be used only for ad-hoc distribution.
  Options:
  - version: App version
  - build: Build number
  - filename: Name of the resulting artefact (IPA file)
  - path: Path to binary
  - xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
"""
lane :build_Beta do |options|
  increment_version_number(version_number: options[:version])
  increment_firebase_build_number(app_id: ENV["APP_ID_BETA"], build: options[:build])

   build(
    export_method: "ad-hoc", 
    scheme: BETA_SCHEME, 
    version: options[:version], 
    build: options[:build], 
    filename: options[:filename], 
    path: options[:path]
  )
end

# TODO: changelog isn't used at all?
desc """
  A lane that builds a \"Tangem\" scheme and uploads the archive to TestFlight for release.
  Using enviroment: Production
  Options:
  - version: app version
  - build: optional build number
  - changelog: string for description archive
  - filename: Name of the resulting artefact (IPA file)
  - path: Path to binary
  - xcode_version_override: Xcode version to use, optional (uses https://github.com/XcodesOrg/xcodes under the hood)
  """
lane :build_RC do |options|
  increment_version_number(version_number: options[:version])
  increment_testflight_build_number(version: options[:version], build: options[:build])

  build(
    scheme: PRODUCTION_SCHEME, 
    version: options[:version], 
    filename: options[:filename], 
    path: options[:path]
  )
end

private_lane :build do |options|
  clean_artifacts

  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  build_app(
    xcargs: "-allowProvisioningUpdates",
    output_directory: options[:path],
    output_name: options[:filename],
    scheme: options[:scheme],
    clean: true,
    silent: false,
    export_method: options[:export_method],
    destination: "generic/platform=iOS",
    export_options: {
      distributionBundleIdentifier: app_identifier,
      iCloudContainerEnvironment: "Production"
    }
  )
end

desc """
  This lane deploy binary to Google Distribution
  Options:
  - app_id: Firebase App ID
  - path: Path to binary
  - firebase_token: Firebase CLI Token
  - changelog: [optional] Changelog will be added to Google Distribution release notes along with the last commit hash.
"""
lane :deploy_firebase do |options|
  path = options[:path]
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"
  firebase_app_distribution(
    app: options[:app_id],
    ipa_path: path,
    groups: FIREBASE_TESTERS_GROUP,
    firebase_cli_token: options[:firebase_token],
    release_notes: release_notes
  )
end

desc """
  This lane deploy binary to TestFLight
  Options:
  - version: app version
  - build: optional build number
  - binary_path: Path to binary
  - asc_key_id: TBD
  - asc_issuer_id: TBD
  - asc_key: TBD
  - changelog: [optional] Changelog will be added to TestFlight release notes along with the last commit hash.
"""
lane :deploy_testflight do |options|
  # Get AppStore API Key
  api_key = app_store_connect_api_key(
     key_id: options[:asc_key_id],
     issuer_id: options[:asc_issuer_id],
     key_content: options[:asc_key],
     is_key_content_base64: true,
     in_house: false # detecting this via ASC private key not currently supported
  )

  # Upload binary to TestFlight
  upload_to_testflight(
    api_key:api_key,
    skip_waiting_for_build_processing: true,
    ipa: options[:binary_path],
    app_version: options[:version],
    changelog: options[:changelog]
  )
end

private_lane :increment_firebase_build_number do |options|
  if options[:build].nil?
    latest_release = firebase_app_distribution_get_latest_release(
      app: options[:app_id],
      firebase_cli_token: ENV["FIREBASE_CREDITIONAL_KEY"]
    )

    if latest_release.nil?
      latest_build_number = 0
    else 
      latest_build_number = latest_release[:buildVersion].to_i
    end
    increment_build_number({ build_number: latest_build_number + 1 })
  else 
    increment_build_number(build_number: options[:build])
  end
end

private_lane :increment_testflight_build_number do |options|
  if options[:build].nil?
    latest_build_number = latest_testflight_build_number(version: options[:version])
    increment_build_number({ build_number: latest_build_number + 1 })
  else
    increment_build_number(build_number: options[:build])
  end
end

desc """
  Fetches and updates localization bundles using Localise fastlane action (https://github.com/lokalise/lokalise-fastlane-actions).
  Uses `LOKALISE_API_TOKEN` and `LOKALISE_PROJECT_ID` env vars.
  Options:
  - languages: A comma-delimited string of languages to update, like `en,fr,de,ja,ru,es,uk_UA`. Pass an empty string to update all available languages.
  - destination: A file path to save localization files to.
"""
lane :update_translations do |options|
  # Can't pass an array as a param for a lane, see https://github.com/fastlane-community/fastlane-plugin-appicon/issues/41 for details
  languages = options[:languages]&.split(",")

  destination = options[:destination]
  UI.user_error!("Invalid destination path '#{destination}' for localization files") unless (destination and not destination.empty?)

  lokalise(
    destination: destination,
    replace_breaks: true,
    use_original: true,
    languages: languages,
    export_sort: "a_z",
    export_empty_as: "base"
  )
end

desc """
  Load from testFlight dSyms and upload it to Firebase
  Options:
  - version: app version
  - build: build number
"""
lane :refresh_dsyms do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  app_store_connect_api_key(duration: 1200, is_key_content_base64: true)
  download_dsyms(
    app_identifier: app_identifier,
    version: options[:version],
    build_number: options[:build]
  )
  upload_symbols_to_crashlytics(app_id: ENV["PRODUCTION_SCHEME"])
  clean_build_artifacts
end

private_lane :upload_dsyms do |options|
  filename = options[:name] + ".app.dSYM.zip"
  path = BUILD_PATH + filename
  upload_symbols_to_crashlytics(
    app_id: options[:app_id],
    dsym_path: path
  )
end

private_lane :clean_artifacts do |options|
  sh("rm -rf builds")
  clean_build_artifacts
end
