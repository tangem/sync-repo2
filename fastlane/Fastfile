default_platform(:ios)

FIREBASE_TESTERS_GROUP = "testers"

PRODUCTION_SCHEME = "Tangem"
BETA_SCHEME = "Tangem Beta"
ALPHA_SCHEME = "Tangem Alpha"

desc """
  This lane builds and run unit-tests for the \"RC\" scheme.
"""
lane :test do
  run_tests(
    workspace: "TangemApp.xcworkspace",
    scheme: Tangem,
    device: "iPhone 13 Pro",
    clean: true,
    build_for_testing: true,
    code_coverage: true
  )
end


desc """
This lane builds a \"Tangem Alpha\" scheme binary. Result binary can be used only for ad-hoc distribution.
Options:
- version: App version
- build: Build number
"""
lane :build_alpha do |options|
  scheme = 
  build(export_method: "ad-hoc", scheme:ALPHA_SCHEME, version: options[:version], build: options[:build], filename: options[:filename], path: options[:path])
end


desc """
A lane that builds a \"Tangem Beta\" scheme binary. Result binary can be used only for ad-hoc distribution.
Options:
- version: App version
- build: Build number
"""
lane :build_beta do |options|
   build(export_method: "ad-hoc", scheme:BETA_SCHEME, version: options[:version], build: options[:build], filename: options[:filename], path: options[:path])
end


desc """
  A lane that builds a \"Tangem\" scheme and uploads the archive to TestFlight for release.
  Using enviroment: Production
  Options:
  - version: app version
  - build: optional build number
  - changelog: string for description archive
  """
lane :build_rc do |options|
  build(scheme: PRODUCTION_SCHEME, version: options[:version], filename: options[:filename], path: options[:path])
end

private_lane :build do |options|
  clean_artifacts
  cocoapods(
    try_repo_update_on_error:true
  )
  increment_version_number(version_number: options[:version])
  increment_build_number(build_number: options[:build])
  xcode_select("/Applications/Xcode.app")
  Dir.chdir("..") do
    sh("./bootstrap.sh") 
  end

  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

  build_app(
    xcargs: "-allowProvisioningUpdates",
    output_directory: options[:path],
    output_name: options[:filename],
    scheme: options[:scheme],
    clean: true,
    silent: false,
    export_method: options[:export_method],
    destination: "generic/platform=iOS",
    export_options: {
      distributionBundleIdentifier: app_identifier,
      iCloudContainerEnvironment: "Production"
    }
  )
end


desc """
This lane deploy binary to Google Distribution
Options:
- app_id: Firebase App ID
- path: Path to binary
- firebase_token: Firebase CLI Token
- changelog: [optional] Changelog will be added to Google Distribution release notes along with the last commit hash.
"""

lane :deploy_firebase do |options|
  path = options[:path]
  release_notes = "#{options[:changelog]}\nGitHash: #{last_git_commit[:commit_hash]}"
  firebase_app_distribution(
    app: options[:app_id],
    ipa_path: path,
    groups: FIREBASE_TESTERS_GROUP,
    firebase_cli_token: options[:firebase_token],
    release_notes: release_notes
  )
end

desc """
This lane deploy binary to TestFLight
Options:
- path: Path to binary
- changelog: [optional] Changelog will be added to TestFlight release notes along with the last commit hash.
"""
lane :upload_store do |options|
  # Get AppStore API Key
  api_key = app_store_connect_api_key(
     key_id: options[:asc_key_id],
     issuer_id: options[:asc_issuer_id],
     key_content: options[:asc_key],
     is_key_content_base64: true,
     in_house: false # detecting this via ASC private key not currently supported
  )

  # Upload binary to TestFlight
  upload_to_testflight(
    api_key:api_key
    skip_waiting_for_build_processing: true,
    ipa: options[:binary_path],
    app_version: options[:version],
    changelog: options[:changelog]
  )
end

desc """
Load from testFlight dSyms and upload it to Firebase
Options:
- version: app version
- build: build number
"""
lane :refresh_dsyms do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  app_store_connect_api_key(duration: 1200, is_key_content_base64: true)
  download_dsyms(
    app_identifier: app_identifier,
    version: options[:version],
    build_number: options[:build]
  )
  upload_symbols_to_crashlytics(app_id: ENV["PRODUCTION_SCHEME"])
  clean_build_artifacts
end


private_lane :upload_dsyms do |options|
  filename = options[:name] + ".app.dSYM.zip"
  path = BUILD_PATH + filename
  upload_symbols_to_crashlytics(
    app_id: options[:app_id],
    dsym_path: path
  )
end

private_lane :clean_artifacts do |options|
  sh("rm -rf builds")
  clean_build_artifacts
end
