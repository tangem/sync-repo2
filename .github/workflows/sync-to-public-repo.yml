name: Prepare and sync with public repo

on:
  push:
    branches:
      - 'feature/IOS-9142_sync_to_public_repo'  # TODO: Test only
  workflow_dispatch:

#permissions:
#  pull-requests: write

env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  SPM_DEPENDENCIES_CACHE_PATH: ./vendor/ios_dependencies
  SOURCE_BRANCH: sync/revision_${{ github.sha }}
  TARGET_BRANCH: main # TODO: Use develop instead?

jobs:
  prepare-and-sync:
    runs-on: macos-15
    steps:
      - name: Checkout GH Enterprise repository
        uses: actions/checkout@v4
        with:
          path: 'private-repo'
          fetch-depth: 0
          submodules: false # Explicitly prevents submodules from being cloned

      - name: Authorize SSH session (for GH Enterprise)
        if: false # TODO: Test only
        env:
          SSH_KEY: ${{ secrets.IOS_DEPENDENCIES_READ_ONLY_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          echo "${SSH_KEY}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          ssh-agent -a "${SSH_AUTH_SOCK}" > /dev/null || true
          ssh-add ~/.ssh/ssh_key

      # When using Github runner images, the preferred way of setting the Ruby version is to use this official action instead of using rvm/rbenv
      - name: Install Ruby
        if: false # TODO: Test only
        uses: ruby/setup-ruby@a2bbe5b1b236842c1cb7dd11e8e3b51e0a616acc  # v1.202.0

      # Skipping Ruby installation since it has been already installed by an action above
      - name: Install required dependencies
        if: false # TODO: Test only
        run: ./bootstrap.sh --skip-ruby

      - name: Fetch and cache SPM dependencies
        if: false # TODO: Test only
        run: |
          bundle exec fastlane cache_spm_dependencies cache_path:${SPM_DEPENDENCIES_CACHE_PATH}

      - name: Remove unused files
        if: false # TODO: Test only
        run: |
          du -d 0 -h ${SPM_DEPENDENCIES_CACHE_PATH} # TODO: Test only
          rm -rf .jira
          rm -rf .github/workflows
          rm -rf .gitmodules
          rm -rf fastlane

      - name: Checkout GH Public repository
        if: false # TODO: Test only
        uses: actions/checkout@v4
        with:
          repository: 'tangem/tangem-app-ios'
          path: 'public-repo'
          fetch-depth: 0
          submodules: false # Explicitly prevents submodules from being cloned
          ssh-key: ${{ secrets.IOS_PUBLIC_REPO_SYNC_TOKEN }}

      - name: Authorize SSH session (for GH Public)
        env:
          SSH_KEY: ${{ secrets.IOS_PUBLIC_REPO_SYNC_TOKEN }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          echo "${SSH_KEY}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          ssh-agent -a "${SSH_AUTH_SOCK}" > /dev/null || true
          ssh-add ~/.ssh/ssh_key

      - name: Commit and push changes
        run: |
          git clone --bare "git@github.com:tangem/tangem-app-ios.git" "public-repo"
          ls -l private-repo/tangem-app-config  || true # TODO: Test only
          ls -l public-repo/tangem-app-config  || true # TODO: Test only
          cd public-repo
          git config --global user.name "Tangem Service"
          git config --global user.email "gitservice@tangem.com"
          git config set advice.addEmbeddedRepo false
          #git remote add public-repo "git@github.com:tangem/tangem-app-ios.git"
          git fetch origin develop
          git checkout -b ${SOURCE_BRANCH} origin/develop
          touch 1234 && git add 1234 # TODO: Test only
          #git add .
          git commit -m "Sync@${GITHUB_SHA}"
          git push origin ${SOURCE_BRANCH} --force

      - name: Open a PR
        if: false # TODO: Test only
        run: |
          gh pr create \
          --repo tangem/tangem-app \
          --base ${TARGET_BRANCH} \
          --head ${SOURCE_BRANCH} \
          --title "Sync@${GITHUB_SHA}" \
          --body "Revision `${GITHUB_SHA}` â†’ `${TARGET_BRANCH}`"
