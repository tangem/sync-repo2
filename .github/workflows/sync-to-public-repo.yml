name: Prepare and sync with public repo

on:
  push:
    branches:
      - 'feature/IOS-9142_sync_to_public_repo'  # TODO: Test only
  workflow_dispatch:

env:
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  SPM_DEPENDENCIES_CACHE_PATH: ./vendor/ios_dependencies
  SOURCE_BRANCH: sync/revision_${{ github.sha }}
  TARGET_BRANCH: develop

jobs:
  prepare-and-sync:
    runs-on: macos-15
    steps:
      - name: Checkout GH Enterprise repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false # Explicitly prevents submodules from being cloned

      - name: Authorize SSH session (for GH Enterprise)
        env:
          SSH_KEY: ${{ secrets.IOS_DEPENDENCIES_READ_ONLY_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          echo "${SSH_KEY}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          ssh-agent -a "${SSH_AUTH_SOCK}" > /dev/null || true
          ssh-add ~/.ssh/ssh_key

      # When using Github runner images, the preferred way of setting the Ruby version is to use this official action instead of using rvm/rbenv
      - name: Install Ruby
        uses: ruby/setup-ruby@a2bbe5b1b236842c1cb7dd11e8e3b51e0a616acc  # v1.202.0

      # Skipping Ruby installation since it has been already installed by an action above
      - name: Install required dependencies
        run: ./bootstrap.sh --skip-ruby

      - name: Fetch and cache SPM dependencies
        run: bundle exec fastlane cache_spm_dependencies cache_path:${SPM_DEPENDENCIES_CACHE_PATH}

      - name: Authorize SSH session (for GH Public)
        env:
          SSH_KEY: ${{ secrets.IOS_PUBLIC_REPO_SYNC_TOKEN }}
        run: |
          ssh-add -D # Removing GH Enterprise SSH identity
          mkdir -p ~/.ssh
          ssh-keyscan github.com > ~/.ssh/known_hosts
          echo "${SSH_KEY}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          ssh-agent -a "${SSH_AUTH_SOCK}" > /dev/null || true
          ssh-add ~/.ssh/ssh_key

      - name: Configure git
        run: |
          git config --global user.name "Tangem Service"
          git config --global user.email "gitservice@tangem.com"

      - name: Clone destination repo
        run: |
          git clone \
          --depth 1 \
          --branch=${TARGET_BRANCH} \
          --single-branch \
          git@github.com:tangem/tangem-app-ios.git public-repo

      - name: Sync all changes from source to destination repo
        run: |
          rsync -av --delete \
          --exclude='.git' \
          --exclude='.jira' \
          --exclude='.github' \
          --exclude='.gitmodules' \
          --exclude='fastlane' \
          --exclude='Utilites' \
          --exclude='Gemfile*' \
          --exclude='bootstrap.sh' \
          --exclude='tangem-app-config' \
          --exclude='public-repo' \
          ./ public-repo

      - name: Commit and push changes
        run: |
          cd public-repo
          git checkout -b ${SOURCE_BRANCH}
          git add .
          git commit -m "Sync@${GITHUB_SHA}"
          git push origin ${SOURCE_BRANCH} --force
