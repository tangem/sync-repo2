name: Jira - Set 'Next Release' version for the merged Jira task

on:
  pull_request:
    branches: 
      #- 'develop'
      - 'test/IOS-8785_ci_cd_create_release'  # TODO: Test only
    types: 
      - closed

env:
  next_version_name: 'Next Release'

jobs:
  prepare:
    name: Prepare information
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    outputs:
      jira_issue_key: '${{ steps.jira.outputs.key }}'
    steps:
      - name: Jira Login
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: '${{ secrets.JIRA_URL }}'
          JIRA_USER_EMAIL: '${{ secrets.JIRA_USER }}'
          JIRA_API_TOKEN: '${{ secrets.JIRA_TOKEN }}'

      - name: Get Jira Issue Key from Branch Name
        id: get-jira-issue-key
        uses: tangem/jira-action@master
        with:
          action: getBranchSummary
          branch-name: '${{ github.ref_name }}'

  set-jira-task-version:
    name: Prepare information
    runs-on: ubuntu-latest
    needs:
      - prepare
    steps:
      - name: Jira Login
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: '${{ secrets.JIRA_URL }}'
          JIRA_USER_EMAIL: '${{ secrets.JIRA_USER }}'
          JIRA_API_TOKEN: '${{ secrets.JIRA_TOKEN }}'

      - name: Jira Check Version
        id: jira-check-version
        uses: tangem/jira-action@master
        with:
          action: 'checkVersion'
          project: 'IOS'
          version: '${{ env.next_version_name }}'

      - name: Jira Create Version
        if: ${{ steps.jira-check-version.outputs.result == 'false' }}
        uses: tangem/jira-action@master
        with:
          action: 'createVersion'
          project: 'IOS'
          version: '${{ env.next_version_name }}'

      - name: Jira Set Version To Issues
        uses: tangem/jira-action@master
        with:
          action: 'setVersionToIssues'
          project: 'IOS'
          version: '${{ env.next_version_name }}'
          # `setVersionToIssues` expects an array of Jira tasks as an argument, so we're creating such array here
          # Docs: To use a literal single quote, escape the literal single quote using an additional single quote ('')
          issues: ${{ fromJSON(format('[''{0}'']', needs.prepare.outputs.jira_issue_key)) }}

